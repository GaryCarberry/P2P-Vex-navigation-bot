{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain = Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\nleft_drive_smart = Motor(Ports.PORT6, False)\nright_drive_smart = Motor(Ports.PORT10, True)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, brain_inertial, 259.34, 320, 40, MM, 1)\narmt = Motor(Ports.PORT3, False)\nClaw = Motor(Ports.PORT4, False)\ndistance_9 = Distance(Ports.PORT9)\neye = Optical(Ports.PORT1)\nbumper_a = Bumper(brain.three_wire_port.a)\nbumper_h = Bumper(brain.three_wire_port.h)\n\n\n# Wait for sensor(s) to fully initialize\nwait(100, MSEC)\n\n# generating and setting random seed\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    xaxis = brain_inertial.acceleration(XAXIS) * 1000\n    yaxis = brain_inertial.acceleration(YAXIS) * 1000\n    zaxis = brain_inertial.acceleration(ZAXIS) * 1000\n    systemTime = brain.timer.system() * 100\n    urandom.seed(int(xaxis + yaxis + zaxis + systemTime)) \n\n# Initialize random seed \ninitializeRandomSeed()\n\nvexcode_initial_drivetrain_calibration_completed = False\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    global vexcode_initial_drivetrain_calibration_completed\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    brain_inertial.calibrate()\n    while brain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    vexcode_initial_drivetrain_calibration_completed = True\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\n# Calibrate the Drivetrain\ncalibrate_drivetrain()\n\n#endregion VEXcode Generated Robot Configuration\nfrom vex import *\narmt.set_velocity(10, PERCENT)# lowering the velocity of each motor for more comfortable gripping and seamless movement\nClaw.set_velocity(8, PERCENT)\neye.set_light_power(100, PERCENT)# increased brightness to assist with colour identification\neye.set_light(LedStateType.ON)\ncolour=eye.color()# finds colour in front of the sensor\n\ndef reversebump():# reverse bump function to recalibrate gyroscope and positioning of robot\n    while True:\n        if bumper_a.pressing() and bumper_h.pressing():#if both bumpers are pressed the robot is in line\n            drivetrain.stop()\n            break# when conditions are met the while loop is broken\n        else:\n            drivetrain.drive(REVERSE)#until the bumpers are pressed the vex will reverse\n        wait(0.5,SECONDS)\nwhile True:\n    \n    for _ in range(2):\n        drivetrain.drive_for(FORWARD, 24, INCHES)\n        drivetrain.turn_for(RIGHT, 90, DEGREES)\n    \n\n    drivetrain.drive_for(FORWARD, 11.6, INCHES)\n    drivetrain.stop()\n    while True:  \n        colour = eye.color()  \n\n        if colour == Color.BLUE:#if the colour blue is seen the vex will ignore it and continue waiting for red\n            brain.screen.clear_screen()\n            brain.screen.print(\"Blue detected! Ignoring...\")\n        \n        elif colour == Color.RED:# if red is seen the code will break from the loop and continue the point to point process\n            brain.screen.clear_screen()\n            brain.screen.print(\"Red found! Picking up...\")\n            break \n        \n        wait(0.5, SECONDS)# small interval to prevent overloading within the brain\n    \n    Claw.spin(REVERSE)\n    Claw.spin_to_position(55, DEGREES)# spinning to position works better than spin for due to motors overloading\n    armt.spin_to_position(320, DEGREES)  \n    drivetrain.turn_for(RIGHT, 90, DEGREES)\n    reversebump()# reverse bump inserted here as robot begins to off centre\n    drivetrain.drive_for(FORWARD, 12, INCHES)#D3   # these comments are mini flags to remind me where the robot is at each point\n    drivetrain.turn_for(RIGHT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 24, INCHES)#\n    drivetrain.turn_for(LEFT, 92, DEGREES)# adjusted for accuracy to 92, proven through multiple tests\n    drivetrain.drive_for(FORWARD, 24, INCHES)\n    drivetrain.turn_for(RIGHT, 90, DEGREES)#B3\n    drivetrain.drive_for(FORWARD, 12, INCHES)\n    drivetrain.turn_for(LEFT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 12, INCHES)\n    drivetrain.turn_for(RIGHT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 12, INCHES)\n    drivetrain.turn_for(RIGHT, 93, DEGREES)\n    wait(1, SECONDS)\n    while distance_9.object_distance(MM)>190:# distance sensor to know when to drop the ball\n        brain.screen.clear_screen()\n        brain.screen.print(\"Distance is \"+ str(distance_9.object_distance(MM)))#calculated based on default distance from my sensor\n        drivetrain.drive_for(FORWARD,1,INCHES)\n        distance_9.object_distance(MM)\n    wait(1,SECONDS)\n    Claw.spin_for(REVERSE, 90, DEGREES)# spin for works in this case as motor is way beyond the threshold\n    \n    drivetrain.drive_for(REVERSE, 28.5, INCHES)\n    drivetrain.turn_for(RIGHT, 90, DEGREES)\n    reversebump()\n    drivetrain.drive_for(FORWARD, 43, INCHES)\n    drivetrain.turn_for(LEFT, 178, DEGREES)\n    drivetrain.drive_for(REVERSE, 25.5, INCHES)\n    armt.spin_to_position(0, DEGREES)#sets arm down to be ready to go again\n    Claw.spin_for(FORWARD,40, DEGREES)\n    wait(10,SECONDS)","textLanguage":"python","robotConfig":[{"port":[6,10,null],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel325in","gearRatio":"1:1","direction":"fwd","gyroType":"integrated","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[3],"name":"armt","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[4],"name":"Claw","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[9],"name":"distance_9","customName":false,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22},{"port":[1],"name":"eye","customName":true,"deviceType":"Optical","deviceClass":"optical","setting":{},"triportSourcePort":22},{"port":[1],"name":"bumper_a","customName":false,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[8],"name":"bumper_h","customName":false,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22}],"slot":2,"platform":"EXP","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","fileFormat":"2.0.0","targetBrainGen":"First","v5SoundsEnabled":false}